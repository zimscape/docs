{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation Welcome to the technical documentation for the Zimscape platform. Start from the top or skip straight to the section you need information about. Getting Started Architecture: A Deployment Platform - The PaaS Idea Projects Containers Environments Networking Command Line Interface Continuous Deployment Products: Domain Names Email Hosting Java NodeJS PHP Python Data & Storage Billing Troubleshooting","title":"Home"},{"location":"#documentation","text":"Welcome to the technical documentation for the Zimscape platform. Start from the top or skip straight to the section you need information about. Getting Started Architecture: A Deployment Platform - The PaaS Idea Projects Containers Environments Networking Command Line Interface Continuous Deployment Products: Domain Names Email Hosting Java NodeJS PHP Python Data & Storage Billing Troubleshooting","title":"Documentation"},{"location":"billing/","text":"","title":"Billing"},{"location":"cd/","text":"Continuous Deployment There has been a lot of talk in the tech community about Continuous Integration and Continuous Deployment (CI/CD) over the last few years. We won't go much into that conversation beyond describing these concepts and pointing out their relevance to Zimscape. Continuous Integration refers to the frequent merging of different streams of work by developers to better represent the state of a project over time. Continuous Deployment has to do with frequently generating deployment packs to be deployed to customer facing environments in order to continuously ship software changes as they become available. Considering that at Zimscape we are more inclined towards solving deployment problems as opposed to integration problems here are a few differences between Zimscape and other CI/CD platforms: Zimscape does not support integration pipelines out of the box Zimscape recommends that tests and packaging be run client side or in CI/CD pipeline programs like Jenkins or Gitlab CI and then output meant for deployment deployed on Zimscape For edge cases Zimscape does offer the ability to run commands before deploying a service via a .runfile Runfile The runfile is a yaml document that post deployment hooks on Zimscape servers use to know how to run an application and whether or not there are commands that should precede the service run command. The run file supports two keys, run and package which respectively take a string array of commands as a value. The file itself and both keys are optional. Here are a few basic examples: Java Application package : - mvn clean package run : - java -jar target/demo-app.jar Mkdocs (Python) package : - pip install mkdocs - mkdocs build - cp -rf site/* . PHP Using Composer package : - composer install","title":"Continuous Deployment"},{"location":"cd/#continuous-deployment","text":"There has been a lot of talk in the tech community about Continuous Integration and Continuous Deployment (CI/CD) over the last few years. We won't go much into that conversation beyond describing these concepts and pointing out their relevance to Zimscape. Continuous Integration refers to the frequent merging of different streams of work by developers to better represent the state of a project over time. Continuous Deployment has to do with frequently generating deployment packs to be deployed to customer facing environments in order to continuously ship software changes as they become available. Considering that at Zimscape we are more inclined towards solving deployment problems as opposed to integration problems here are a few differences between Zimscape and other CI/CD platforms: Zimscape does not support integration pipelines out of the box Zimscape recommends that tests and packaging be run client side or in CI/CD pipeline programs like Jenkins or Gitlab CI and then output meant for deployment deployed on Zimscape For edge cases Zimscape does offer the ability to run commands before deploying a service via a .runfile","title":"Continuous Deployment"},{"location":"cd/#runfile","text":"The runfile is a yaml document that post deployment hooks on Zimscape servers use to know how to run an application and whether or not there are commands that should precede the service run command. The run file supports two keys, run and package which respectively take a string array of commands as a value. The file itself and both keys are optional. Here are a few basic examples:","title":"Runfile"},{"location":"cd/#java-application","text":"package : - mvn clean package run : - java -jar target/demo-app.jar","title":"Java Application"},{"location":"cd/#mkdocs-python","text":"package : - pip install mkdocs - mkdocs build - cp -rf site/* .","title":"Mkdocs (Python)"},{"location":"cd/#php-using-composer","text":"package : - composer install","title":"PHP Using Composer"},{"location":"cli/","text":"Command Line Interface The Command Line Interface is intended to make it easier for software developers in particular to deploy software to development environments on zimscape.com. Git The Zimscape CLI requires that you have Git installed before hand as we use Git to move your source code. If you're new to Git you can have a quick look at it here . Installation Available Commands Installation $ npm install -g zimscape-cli Verify your version $ zimscape -v zimscape-cli/0.0.8 linux-x64 node-v11.10.1 Available Commands zimscape login zimscape ls zimscape push [REMOTE] zimscape logs [REMOTE] zimscape login Login to zimscape.com. Here you'll be required to use the email address and password used to create a zimscape account. $ zimscape login Login in to your Zimscape.com account Account email: email@gmail.com Password: ********* one moment please... Login successful : ) zimscape ls List development environments on Zimscape.com. This command give you a snapshot of all development environments under all currently active projects. $ zimscape ls one moment please... Product Project Domain Type Status PHP zimscape.com php.zimscape.com staging active zimscape push [REMOTE] Use git to push current code base to chosen environment. This command is simply a wrapper of the common git push [remote] [branch] command. To successfully push to a Zimscape remote you have to have a branch named after the respective environment type e.g. in the example above, a staging branch. $ zimscape push php.zimscape.com one moment please... Counting objects: 4 , done . Delta compression using up to 8 threads. Compressing objects: 100 % ( 4 /4 ) , done . Writing objects: 100 % ( 4 /4 ) , 355 bytes | 355 .00 KiB/s, done . Total 4 ( delta 3 ) , reused 0 ( delta 0 ) remote: Ref refs/heads/staging received. Deploying 'staging' branch... remote: Already on 'staging' remote: Ref refs/heads/staging received and successfully deployed to staging remote: Stopping service... remote: Stopping daemon: php-staging. To gitserver.zimscape.com:php-project.git 85b2d82..347d647 staging -> staging In the absence of the matching branch you'll encounter an error: one moment please... error: src refspec staging does not match any. error: failed to push some refs to 'zimscape@gitserver.zimscape.com:php-project.git' One way to create a new branch from a branch with your latest commits would be: $ git checkout -b staging This command creates a branch staging identical to the current branch you're on. zimscape logs [REMOTE] Tail logs for chosen environment. This commands gives you insight into what's happening with your service as well as any other services running in the container environment. The logs returned are an amalgamation of as most of the activity that happens within an applications environment for example deployment logs, web server logs and service daemon logs. $ zimscape logs php.zimscape.com one moment please... Sun Apr 19 12 :36:31 UTC 2020 Ref refs/heads/staging received. Deploying 'staging' branch... Sun Apr 19 12 :36:31 UTC 2020 Ref refs/heads/staging received and successfully deployed to staging","title":"Command Line Interface"},{"location":"cli/#command-line-interface","text":"The Command Line Interface is intended to make it easier for software developers in particular to deploy software to development environments on zimscape.com.","title":"Command Line Interface"},{"location":"cli/#git","text":"The Zimscape CLI requires that you have Git installed before hand as we use Git to move your source code. If you're new to Git you can have a quick look at it here . Installation Available Commands","title":"Git"},{"location":"cli/#installation","text":"$ npm install -g zimscape-cli Verify your version $ zimscape -v zimscape-cli/0.0.8 linux-x64 node-v11.10.1","title":"Installation"},{"location":"cli/#available-commands","text":"zimscape login zimscape ls zimscape push [REMOTE] zimscape logs [REMOTE]","title":"Available Commands"},{"location":"cli/#zimscape-login","text":"Login to zimscape.com. Here you'll be required to use the email address and password used to create a zimscape account. $ zimscape login Login in to your Zimscape.com account Account email: email@gmail.com Password: ********* one moment please... Login successful : )","title":"zimscape login"},{"location":"cli/#zimscape-ls","text":"List development environments on Zimscape.com. This command give you a snapshot of all development environments under all currently active projects. $ zimscape ls one moment please... Product Project Domain Type Status PHP zimscape.com php.zimscape.com staging active","title":"zimscape ls"},{"location":"cli/#zimscape-push-remote","text":"Use git to push current code base to chosen environment. This command is simply a wrapper of the common git push [remote] [branch] command. To successfully push to a Zimscape remote you have to have a branch named after the respective environment type e.g. in the example above, a staging branch. $ zimscape push php.zimscape.com one moment please... Counting objects: 4 , done . Delta compression using up to 8 threads. Compressing objects: 100 % ( 4 /4 ) , done . Writing objects: 100 % ( 4 /4 ) , 355 bytes | 355 .00 KiB/s, done . Total 4 ( delta 3 ) , reused 0 ( delta 0 ) remote: Ref refs/heads/staging received. Deploying 'staging' branch... remote: Already on 'staging' remote: Ref refs/heads/staging received and successfully deployed to staging remote: Stopping service... remote: Stopping daemon: php-staging. To gitserver.zimscape.com:php-project.git 85b2d82..347d647 staging -> staging In the absence of the matching branch you'll encounter an error: one moment please... error: src refspec staging does not match any. error: failed to push some refs to 'zimscape@gitserver.zimscape.com:php-project.git' One way to create a new branch from a branch with your latest commits would be: $ git checkout -b staging This command creates a branch staging identical to the current branch you're on.","title":"zimscape push [REMOTE]"},{"location":"cli/#zimscape-logs-remote","text":"Tail logs for chosen environment. This commands gives you insight into what's happening with your service as well as any other services running in the container environment. The logs returned are an amalgamation of as most of the activity that happens within an applications environment for example deployment logs, web server logs and service daemon logs. $ zimscape logs php.zimscape.com one moment please... Sun Apr 19 12 :36:31 UTC 2020 Ref refs/heads/staging received. Deploying 'staging' branch... Sun Apr 19 12 :36:31 UTC 2020 Ref refs/heads/staging received and successfully deployed to staging","title":"zimscape logs [REMOTE]"},{"location":"console/","text":"","title":"Console"},{"location":"data/","text":"Data & Storage","title":"Data & Storage"},{"location":"data/#data-storage","text":"","title":"Data &amp; Storage"},{"location":"getstarted/","text":"Getting Started Registration When registering a new account on Zimscape take note that the email address required needs to be an active one that you have immediate access to. Account Details We collect trading details for your organization for purposes of our records as well as third party records like registrars for domain names. Creating a project A project is the top level object you need to start deploying apps on Zimscape. Your Zimscape account can have as many projects as you need. All that's required to deploy a project is a valid domain name. A project deployed without any other apps would have a single subscription, the domain hosting subscription. Products Zimscape refers to all available applications whether prepackaged or development environments as product. Essentially, anything that can be deployed from the products page is a product. Once deployed products become subscriptions and respective billing information can be viewed on the billing page. Products are added to a project. A project can have many products but can only have one type of each product, never more than one i.e. you can only deploy one PHP subscription in a project. Once a subscription is deployed, any subsequent deployment will be handled according to our Billing Policy . Billing Each project's first deployment is eligible for a free offer. This means that the first deployment is always free. In addition, each new project gets free credit upon first deployment, because who doesn't love a freebie... The amount of credit varies but is usually enough for an average deployment for a database driven application.","title":"Getting Started"},{"location":"getstarted/#getting-started","text":"","title":"Getting Started"},{"location":"getstarted/#registration","text":"When registering a new account on Zimscape take note that the email address required needs to be an active one that you have immediate access to.","title":"Registration"},{"location":"getstarted/#account-details","text":"We collect trading details for your organization for purposes of our records as well as third party records like registrars for domain names.","title":"Account Details"},{"location":"getstarted/#creating-a-project","text":"A project is the top level object you need to start deploying apps on Zimscape. Your Zimscape account can have as many projects as you need. All that's required to deploy a project is a valid domain name. A project deployed without any other apps would have a single subscription, the domain hosting subscription.","title":"Creating a project"},{"location":"getstarted/#products","text":"Zimscape refers to all available applications whether prepackaged or development environments as product. Essentially, anything that can be deployed from the products page is a product. Once deployed products become subscriptions and respective billing information can be viewed on the billing page. Products are added to a project. A project can have many products but can only have one type of each product, never more than one i.e. you can only deploy one PHP subscription in a project. Once a subscription is deployed, any subsequent deployment will be handled according to our Billing Policy .","title":"Products"},{"location":"getstarted/#billing","text":"Each project's first deployment is eligible for a free offer. This means that the first deployment is always free. In addition, each new project gets free credit upon first deployment, because who doesn't love a freebie... The amount of credit varies but is usually enough for an average deployment for a database driven application.","title":"Billing"},{"location":"troubleshooting/","text":"","title":"Troubleshooting"},{"location":"architecture/","text":"A Deployment Platform - The PaaS Idea Zimscape is by design a platform as a service (PaaS). What is a PaaS you say? Check out what Azure has to say about it here . The simple version is that Zimscape provides a platform that allows developers and businesses to deploy software as well as provision the hardware resources that they need in order to run the software. Zimscape was born out of the burden to solve the challenges around finding, building and deploying web software, provisioning compute resources to run it, and maintaining high availability throughout the lifecycle of the software. This effectively makes Zimscape a deployment platform. Our focus is primarily on delivering software to production environments in the simplest way possible. Whether that software is coming from a development environment or has been pre-packaged for easy reuse. What Zimscape is not Zimscape is not your average web hosting platform. Zimscape's approach is to leverage containerization technology to create an abstraction layer between software and the hardware resources needed to run it. We highlight some of the benefits of this here . However, In order to achieve this level of abstraction Zimscape insists that users follow certain conventions that otherwise wouldn't be imposed by an ordinary web hosting provider. Whilst there might be a learning curve to some of these we believe that these convention make your work flow significantly easier especially when it comes to deployment. Business Solutions As a deployment platform Zimscape also endeavours to make it easier for average businesses to access technology solutions. We leverage our knowledge in software development (Dev) and information-technology operations (Ops) to provide easy deployment options for business tools like monitoring, reports and collaboration tools.","title":"A Deployment Platform - The PaaS Idea"},{"location":"architecture/#a-deployment-platform-the-paas-idea","text":"Zimscape is by design a platform as a service (PaaS). What is a PaaS you say? Check out what Azure has to say about it here . The simple version is that Zimscape provides a platform that allows developers and businesses to deploy software as well as provision the hardware resources that they need in order to run the software. Zimscape was born out of the burden to solve the challenges around finding, building and deploying web software, provisioning compute resources to run it, and maintaining high availability throughout the lifecycle of the software. This effectively makes Zimscape a deployment platform. Our focus is primarily on delivering software to production environments in the simplest way possible. Whether that software is coming from a development environment or has been pre-packaged for easy reuse.","title":"A Deployment Platform - The PaaS Idea"},{"location":"architecture/#what-zimscape-is-not","text":"Zimscape is not your average web hosting platform. Zimscape's approach is to leverage containerization technology to create an abstraction layer between software and the hardware resources needed to run it. We highlight some of the benefits of this here . However, In order to achieve this level of abstraction Zimscape insists that users follow certain conventions that otherwise wouldn't be imposed by an ordinary web hosting provider. Whilst there might be a learning curve to some of these we believe that these convention make your work flow significantly easier especially when it comes to deployment.","title":"What Zimscape is not"},{"location":"architecture/#business-solutions","text":"As a deployment platform Zimscape also endeavours to make it easier for average businesses to access technology solutions. We leverage our knowledge in software development (Dev) and information-technology operations (Ops) to provide easy deployment options for business tools like monitoring, reports and collaboration tools.","title":"Business Solutions"},{"location":"architecture/containers/","text":"Containers Applications on Zimscape run in containerized environments. Each product is deployed in its own environment with a set level of resources based on the plan chosen. Containerization as a convention has many benefits documented across the internet. The ones we leverage on the most are: Can be quickly spawned or stripped down Consistent predictable way of managing data persistence Abstraction of software architecture components (for one example, see Data & Storage ) Simplified scaling Automated load balancing of instances Things to note about containerized environments are: They are ephemeral, that is they have a limited lifespan and, as a result, do not maintain state. This is important because your app must be designed to persist data in specific storage locations if the data is required for more than 24hrs. See environments . Each container exposes a maximum of three ports for use by services that run inside it. These ports are primarily for the development, staging and live environments but can be re-purposed if a service needs to expose more than one port. Each container has a private hostname accessible only by applications deployed in the same project. This is convenient and faster when app to app communication doesn't require going over the internet e.g. a java application communicating with a mysql instance.","title":"Containers"},{"location":"architecture/containers/#containers","text":"Applications on Zimscape run in containerized environments. Each product is deployed in its own environment with a set level of resources based on the plan chosen. Containerization as a convention has many benefits documented across the internet. The ones we leverage on the most are: Can be quickly spawned or stripped down Consistent predictable way of managing data persistence Abstraction of software architecture components (for one example, see Data & Storage ) Simplified scaling Automated load balancing of instances","title":"Containers"},{"location":"architecture/containers/#things-to-note-about-containerized-environments-are","text":"They are ephemeral, that is they have a limited lifespan and, as a result, do not maintain state. This is important because your app must be designed to persist data in specific storage locations if the data is required for more than 24hrs. See environments . Each container exposes a maximum of three ports for use by services that run inside it. These ports are primarily for the development, staging and live environments but can be re-purposed if a service needs to expose more than one port. Each container has a private hostname accessible only by applications deployed in the same project. This is convenient and faster when app to app communication doesn't require going over the internet e.g. a java application communicating with a mysql instance.","title":"Things to note about containerized environments are:"},{"location":"architecture/environments/","text":"Environments Environments give you the flexibility to expose different versions of your application whenever there is need to. Not every product on Zimscape exposes the ability to manage environments however. Some projects deploy with a base environment and will only offer that base environment throughout the product's lifespan, for example database products like MySQL. Document Roots Each environment has a document root. This is where files related to that environment are stored. This is true for both prepackaged applications and applications deployed to development environments. Document roots are important because only files in these locations persist across container restarts. This means that applications deployed on Zimscape should save data meant for persistence to the applications root path. Ports","title":"Environments"},{"location":"architecture/environments/#environments","text":"Environments give you the flexibility to expose different versions of your application whenever there is need to. Not every product on Zimscape exposes the ability to manage environments however. Some projects deploy with a base environment and will only offer that base environment throughout the product's lifespan, for example database products like MySQL.","title":"Environments"},{"location":"architecture/environments/#document-roots","text":"Each environment has a document root. This is where files related to that environment are stored. This is true for both prepackaged applications and applications deployed to development environments. Document roots are important because only files in these locations persist across container restarts. This means that applications deployed on Zimscape should save data meant for persistence to the applications root path.","title":"Document Roots"},{"location":"architecture/environments/#ports","text":"","title":"Ports"},{"location":"architecture/networking/","text":"Networking Applications on Zimscape run in containerized environments. Each project has a self contained isolated network that allows applications deployed in a project to communicate with each other. This communication is achieved through an internal DNS system that links hostnames to container IPs. Things to note about networking on Zimscape are: Private hostnames are generated based on project domain names. An application can be deployed in any of our server locations depending on capacity and provisioning requirements. This means that you shouldn't rely on IP addresses advertised by our domains and should instead utilize DNS records for routing traffic to your services. Each application container has a private IP address assigned to it when it gets spawned, but since containers are ephemeral these are likely to change over time and shouldn't be relied upon for application to application communication","title":"Networking"},{"location":"architecture/networking/#networking","text":"Applications on Zimscape run in containerized environments. Each project has a self contained isolated network that allows applications deployed in a project to communicate with each other. This communication is achieved through an internal DNS system that links hostnames to container IPs.","title":"Networking"},{"location":"architecture/networking/#things-to-note-about-networking-on-zimscape-are","text":"Private hostnames are generated based on project domain names. An application can be deployed in any of our server locations depending on capacity and provisioning requirements. This means that you shouldn't rely on IP addresses advertised by our domains and should instead utilize DNS records for routing traffic to your services. Each application container has a private IP address assigned to it when it gets spawned, but since containers are ephemeral these are likely to change over time and shouldn't be relied upon for application to application communication","title":"Things to note about networking on Zimscape are:"},{"location":"architecture/projects/","text":"Projects Applications deployed on Zimscape are deployed under projects. In order to deploy applications on Zimscape a user must have created a project to house those applications under. A user can create as many projects as they need. Things to note about projects on Zimscape are: Projects are the parent object required for deployment of any service on Zimscape A project's identity is derived directly from the domain name chosen for the project. A project can only have one domain name and that domain name sticks throughout the existence of the project affecting application hostnames and service names Billing is done per project. As such a Zimscape account can have multiple project accounts that can be funded separately and as such any billing disruption only applies on a per project basis. Each project's first deployment is eligible for a free offer. A gift from us to you on your latest adventure \ud83d\ude03","title":"Projects"},{"location":"architecture/projects/#projects","text":"Applications deployed on Zimscape are deployed under projects. In order to deploy applications on Zimscape a user must have created a project to house those applications under. A user can create as many projects as they need.","title":"Projects"},{"location":"architecture/projects/#things-to-note-about-projects-on-zimscape-are","text":"Projects are the parent object required for deployment of any service on Zimscape A project's identity is derived directly from the domain name chosen for the project. A project can only have one domain name and that domain name sticks throughout the existence of the project affecting application hostnames and service names Billing is done per project. As such a Zimscape account can have multiple project accounts that can be funded separately and as such any billing disruption only applies on a per project basis. Each project's first deployment is eligible for a free offer. A gift from us to you on your latest adventure \ud83d\ude03","title":"Things to note about projects on Zimscape are:"},{"location":"products/domains/","text":"Domain Names","title":"Domain Names"},{"location":"products/domains/#domain-names","text":"","title":"Domain Names"},{"location":"products/email/","text":"Email Hosting","title":"Email Hosting"},{"location":"products/email/#email-hosting","text":"","title":"Email Hosting"},{"location":"products/java/","text":"Java","title":"Java"},{"location":"products/java/#java","text":"","title":"Java"},{"location":"products/nodejs/","text":"Node JS","title":"Node JS"},{"location":"products/nodejs/#node-js","text":"","title":"Node JS"},{"location":"products/php/","text":"PHP","title":"PHP"},{"location":"products/php/#php","text":"","title":"PHP"},{"location":"products/python/","text":"Python","title":"Python"},{"location":"products/python/#python","text":"","title":"Python"}]}